# Update all versions in this file by running:
#   $ pre-commit autoupdate
minimum_pre_commit_version: 3.3.2
default_language_version:
  python: python3.12
exclude: "{{cookiecutter.repo_name}}"
repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: end-of-file-fixer
        name: Check for a blank line at the end of scripts (auto-fixes)
      - id: trailing-whitespace
      - id: check-builtin-literals
      - id: check-byte-order-marker
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: check-symlinks
      - id: check-toml
      - id: check-vcs-permalinks
      - id: check-xml
      - id: debug-statements
      - id: detect-private-key
      - id: mixed-line-ending
      - id: fix-encoding-pragma
        args: ["--remove"]
      - id: check-yaml
      - id: check-added-large-files
        name: Check for files larger than 5 MB
        args: ["--maxkb=5120"]
      - id: check-ast
      - id: check-docstring-first
      - id: name-tests-test
        args: ["--django"]

  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.13
    hooks:
      # Run the linter.
      - id: ruff
        types_or: [python, pyi, jupyter]
        args: [--fix]
      # Run the formatter.
      - id: ruff-format
        types_or: [python, pyi, jupyter]

  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        name: detect-secrets - Detect secrets in staged code
        args: [
            "--baseline",
            ".secrets.baseline",
            # https://regex101.com/
            "--exclude-files 'poetry\\.lock'",
            "--exclude-files '\\.secrets\\.baseline'",
            "--exclude-files '\\.env\\.template'",
            # "--exclude-files '.*\\.ipynb$'",
            # "--exclude-files '.*build/'",
            "--exclude-secrets 'password|ENTER_PASSWORD_HERE|INSERT_API_KEY_HERE'",
            "--exclude-lines 'integrity=*sha'",
          ]
        # https://pre-commit.com/#regular-expressions
        exclude: |
          (?x)^(
              poetry\.lock|
              \.secrets\.baseline|
              \.env\.template
          )$
  # - repo: https://github.com/python-poetry/poetry
  #   rev: 1.4.0
  #   hooks:
  #     - id: poetry-check
  #     - id: poetry-lock
  #       args: ["--no-update"]
  #     - id: poetry-export
  #       args:
  #         [
  #           "-f",
  #           "requirements.txt",
  #           "-o",
  #           "requirements.txt",
  #           "--without-hashes",
  #         ]
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.0.0-alpha.9-for-vscode
    hooks:
      - id: prettier
        types_or: [yaml]
        additional_dependencies:
          - "prettier@2.8.4"
  - repo: local
    hooks:
      - id: pip-audit
        name: pip-audit
        entry: pip-audit
        # Exclusions example
        # entry: pip-audit --ignore-vuln PYSEC-2022-42974 --ignore-vuln GHSA-w596-4wvx-j9j6
        language: system
        always_run: true
        pass_filenames: false
        stages: [manual]
      # TODO: Remove once this is resolved
      # https://github.com/python-poetry/poetry/issues/2765
      # https://github.com/python-poetry/poetry/issues/7075
      - id: poetry-lock
        name: poetry-lock
        # entry: bash -c 'poetry lock && python add_markers.py'
        entry: bash -c 'poetry lock --no-update'
        language: system
        always_run: true
        pass_filenames: false
      - id: poetry-export
        name: poetry-export
        entry: poetry export -f requirements.txt --output requirements.txt --without-hashes
        language: system
        always_run: true
        pass_filenames: false

    # - id: pip-sync-dry-run
    #     name: pip-sync-dry-run
    #     entry: pip-sync --dry-run
    #     language: system
    #     always_run: true
    #     pass_filenames: false
